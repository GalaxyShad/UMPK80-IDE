import { writeFileSync } from 'node:fs'

const first = [
  {
    'hexOpcode': '00',
    'decimalOpcode': '000',
    'binaryOpcode': '00000000',
    'mnemonic': 'NOP',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '08',
    'decimalOpcode': '008',
    'binaryOpcode': '00001000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '10',
    'decimalOpcode': '016',
    'binaryOpcode': '00010000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '20',
    'decimalOpcode': '032',
    'binaryOpcode': '00100000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '18',
    'decimalOpcode': '024',
    'binaryOpcode': '00011000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '28',
    'decimalOpcode': '040',
    'binaryOpcode': '00101000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '30',
    'decimalOpcode': '048',
    'binaryOpcode': '00110000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '38',
    'decimalOpcode': '056',
    'binaryOpcode': '00111000',
    'mnemonic': 'NOP?',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '00xxx000',
    'flags': '',
    'tags': 'undocumented',
  },
  {
    'hexOpcode': '01',
    'decimalOpcode': '001',
    'binaryOpcode': '00000001',
    'mnemonic': 'LXI',
    'argument1': 'B',
    'argument2': 'DATA16',
    'cycles': '10',
    'mask': '00rr0001',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '02',
    'decimalOpcode': '002',
    'binaryOpcode': '00000010',
    'mnemonic': 'STAX',
    'argument1': 'B',
    'argument2': '',
    'cycles': '7',
    'mask': '000r0010',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '03',
    'decimalOpcode': '003',
    'binaryOpcode': '00000011',
    'mnemonic': 'INX',
    'argument1': 'B',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr0011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '04',
    'decimalOpcode': '004',
    'binaryOpcode': '00000100',
    'mnemonic': 'INR',
    'argument1': 'B',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '05',
    'decimalOpcode': '005',
    'binaryOpcode': '00000101',
    'mnemonic': 'DCR',
    'argument1': 'B',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '06',
    'decimalOpcode': '006',
    'binaryOpcode': '00000110',
    'mnemonic': 'MVI',
    'argument1': 'B',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '07',
    'decimalOpcode': '007',
    'binaryOpcode': '00000111',
    'mnemonic': 'RLC',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '09',
    'decimalOpcode': '009',
    'binaryOpcode': '00001001',
    'mnemonic': 'DAD',
    'argument1': 'B',
    'argument2': '',
    'cycles': '10',
    'mask': '00rr1001',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '0A',
    'decimalOpcode': '010',
    'binaryOpcode': '00001010',
    'mnemonic': 'LDAX',
    'argument1': 'B',
    'argument2': '',
    'cycles': '7',
    'mask': '000r1010',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '0B',
    'decimalOpcode': '011',
    'binaryOpcode': '00001011',
    'mnemonic': 'DCX',
    'argument1': 'B',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr1011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '0C',
    'decimalOpcode': '012',
    'binaryOpcode': '00001100',
    'mnemonic': 'INR',
    'argument1': 'C',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '0D',
    'decimalOpcode': '013',
    'binaryOpcode': '00001101',
    'mnemonic': 'DCR',
    'argument1': 'C',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '0E',
    'decimalOpcode': '014',
    'binaryOpcode': '00001110',
    'mnemonic': 'MVI',
    'argument1': 'C',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '0F',
    'decimalOpcode': '015',
    'binaryOpcode': '00001111',
    'mnemonic': 'RRC',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '11',
    'decimalOpcode': '017',
    'binaryOpcode': '00010001',
    'mnemonic': 'LXI',
    'argument1': 'D',
    'argument2': 'DATA16',
    'cycles': '10',
    'mask': '00rr0001',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '12',
    'decimalOpcode': '018',
    'binaryOpcode': '00010010',
    'mnemonic': 'STAX',
    'argument1': 'D',
    'argument2': '',
    'cycles': '7',
    'mask': '000r0010',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '13',
    'decimalOpcode': '019',
    'binaryOpcode': '00010011',
    'mnemonic': 'INX',
    'argument1': 'D',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr0011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '14',
    'decimalOpcode': '020',
    'binaryOpcode': '00010100',
    'mnemonic': 'INR',
    'argument1': 'D',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '15',
    'decimalOpcode': '021',
    'binaryOpcode': '00010101',
    'mnemonic': 'DCR',
    'argument1': 'D',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '16',
    'decimalOpcode': '022',
    'binaryOpcode': '00010110',
    'mnemonic': 'MVI',
    'argument1': 'D',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '17',
    'decimalOpcode': '023',
    'binaryOpcode': '00010111',
    'mnemonic': 'RAL',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '19',
    'decimalOpcode': '025',
    'binaryOpcode': '00011001',
    'mnemonic': 'DAD',
    'argument1': 'D',
    'argument2': '',
    'cycles': '10',
    'mask': '00rr1001',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '1A',
    'decimalOpcode': '026',
    'binaryOpcode': '00011010',
    'mnemonic': 'LDAX',
    'argument1': 'D',
    'argument2': '',
    'cycles': '7',
    'mask': '000r1010',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '1B',
    'decimalOpcode': '027',
    'binaryOpcode': '00011011',
    'mnemonic': 'DCX',
    'argument1': 'D',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr1011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '1C',
    'decimalOpcode': '028',
    'binaryOpcode': '00011100',
    'mnemonic': 'INR',
    'argument1': 'E',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '1D',
    'decimalOpcode': '029',
    'binaryOpcode': '00011101',
    'mnemonic': 'DCR',
    'argument1': 'E',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '1E',
    'decimalOpcode': '030',
    'binaryOpcode': '00011110',
    'mnemonic': 'MVI',
    'argument1': 'E',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '1F',
    'decimalOpcode': '031',
    'binaryOpcode': '00011111',
    'mnemonic': 'RAR',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '21',
    'decimalOpcode': '033',
    'binaryOpcode': '00100001',
    'mnemonic': 'LXI',
    'argument1': 'H',
    'argument2': 'DATA16',
    'cycles': '10',
    'mask': '00rr0001',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '22',
    'decimalOpcode': '034',
    'binaryOpcode': '00100010',
    'mnemonic': 'SHLD',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '16',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '23',
    'decimalOpcode': '035',
    'binaryOpcode': '00100011',
    'mnemonic': 'INX',
    'argument1': 'H',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr0011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '24',
    'decimalOpcode': '036',
    'binaryOpcode': '00100100',
    'mnemonic': 'INR',
    'argument1': 'H',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '25',
    'decimalOpcode': '037',
    'binaryOpcode': '00100101',
    'mnemonic': 'DCR',
    'argument1': 'H',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '26',
    'decimalOpcode': '038',
    'binaryOpcode': '00100110',
    'mnemonic': 'MVI',
    'argument1': 'H',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '27',
    'decimalOpcode': '039',
    'binaryOpcode': '00100111',
    'mnemonic': 'DAA',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '29',
    'decimalOpcode': '041',
    'binaryOpcode': '00101001',
    'mnemonic': 'DAD',
    'argument1': 'H',
    'argument2': '',
    'cycles': '10',
    'mask': '00rr1001',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '2A',
    'decimalOpcode': '042',
    'binaryOpcode': '00101010',
    'mnemonic': 'LHLD',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '16',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '2B',
    'decimalOpcode': '043',
    'binaryOpcode': '00101011',
    'mnemonic': 'DCX',
    'argument1': 'H',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr1011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '2C',
    'decimalOpcode': '044',
    'binaryOpcode': '00101100',
    'mnemonic': 'INR',
    'argument1': 'L',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '2D',
    'decimalOpcode': '045',
    'binaryOpcode': '00101101',
    'mnemonic': 'DCR',
    'argument1': 'L',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '2E',
    'decimalOpcode': '046',
    'binaryOpcode': '00101110',
    'mnemonic': 'MVI',
    'argument1': 'L',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '2F',
    'decimalOpcode': '047',
    'binaryOpcode': '00101111',
    'mnemonic': 'CMA',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '31',
    'decimalOpcode': '049',
    'binaryOpcode': '00110001',
    'mnemonic': 'LXI',
    'argument1': 'SP',
    'argument2': 'DATA16',
    'cycles': '10',
    'mask': '00rr0001',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '32',
    'decimalOpcode': '050',
    'binaryOpcode': '00110010',
    'mnemonic': 'STA',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '13',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '33',
    'decimalOpcode': '051',
    'binaryOpcode': '00110011',
    'mnemonic': 'INX',
    'argument1': 'SP',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr0011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '34',
    'decimalOpcode': '052',
    'binaryOpcode': '00110100',
    'mnemonic': 'INR',
    'argument1': 'M',
    'argument2': '',
    'cycles': '10',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '35',
    'decimalOpcode': '053',
    'binaryOpcode': '00110101',
    'mnemonic': 'DCR',
    'argument1': 'M',
    'argument2': '',
    'cycles': '10',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '36',
    'decimalOpcode': '054',
    'binaryOpcode': '00110110',
    'mnemonic': 'MVI',
    'argument1': 'M',
    'argument2': 'DATA8',
    'cycles': '10',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '37',
    'decimalOpcode': '055',
    'binaryOpcode': '00110111',
    'mnemonic': 'STC',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '39',
    'decimalOpcode': '057',
    'binaryOpcode': '00111001',
    'mnemonic': 'DAD',
    'argument1': 'SP',
    'argument2': '',
    'cycles': '10',
    'mask': '00rr1001',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '3A',
    'decimalOpcode': '058',
    'binaryOpcode': '00111010',
    'mnemonic': 'LDA',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '13',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '3B',
    'decimalOpcode': '059',
    'binaryOpcode': '00111011',
    'mnemonic': 'DCX',
    'argument1': 'SP',
    'argument2': '',
    'cycles': '5',
    'mask': '00rr1011',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '3C',
    'decimalOpcode': '060',
    'binaryOpcode': '00111100',
    'mnemonic': 'INR',
    'argument1': 'A',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '3D',
    'decimalOpcode': '061',
    'binaryOpcode': '00111101',
    'mnemonic': 'DCR',
    'argument1': 'A',
    'argument2': '',
    'cycles': '5',
    'mask': '00rrr100',
    'flags': 'S Z A P -',
    'tags': '',
  },
  {
    'hexOpcode': '3E',
    'decimalOpcode': '062',
    'binaryOpcode': '00111110',
    'mnemonic': 'MVI',
    'argument1': 'A',
    'argument2': 'DATA8',
    'cycles': '7',
    'mask': '00rrr110',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '3F',
    'decimalOpcode': '063',
    'binaryOpcode': '00111111',
    'mnemonic': 'CMC',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '- - - - C',
    'tags': '',
  },
  {
    'hexOpcode': '76',
    'decimalOpcode': '118',
    'binaryOpcode': '01110110',
    'mnemonic': 'HLT',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '40',
    'decimalOpcode': '064',
    'binaryOpcode': '01000000',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '41',
    'decimalOpcode': '065',
    'binaryOpcode': '01000001',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '42',
    'decimalOpcode': '066',
    'binaryOpcode': '01000010',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '43',
    'decimalOpcode': '067',
    'binaryOpcode': '01000011',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '44',
    'decimalOpcode': '068',
    'binaryOpcode': '01000100',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '45',
    'decimalOpcode': '069',
    'binaryOpcode': '01000101',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '46',
    'decimalOpcode': '070',
    'binaryOpcode': '01000110',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '47',
    'decimalOpcode': '071',
    'binaryOpcode': '01000111',
    'mnemonic': 'MOV',
    'argument1': 'B',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '48',
    'decimalOpcode': '072',
    'binaryOpcode': '01001000',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '49',
    'decimalOpcode': '073',
    'binaryOpcode': '01001001',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4A',
    'decimalOpcode': '074',
    'binaryOpcode': '01001010',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4B',
    'decimalOpcode': '075',
    'binaryOpcode': '01001011',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4C',
    'decimalOpcode': '076',
    'binaryOpcode': '01001100',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4D',
    'decimalOpcode': '077',
    'binaryOpcode': '01001101',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4E',
    'decimalOpcode': '078',
    'binaryOpcode': '01001110',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '4F',
    'decimalOpcode': '079',
    'binaryOpcode': '01001111',
    'mnemonic': 'MOV',
    'argument1': 'C',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '50',
    'decimalOpcode': '080',
    'binaryOpcode': '01010000',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '51',
    'decimalOpcode': '081',
    'binaryOpcode': '01010001',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '52',
    'decimalOpcode': '082',
    'binaryOpcode': '01010010',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '53',
    'decimalOpcode': '083',
    'binaryOpcode': '01010011',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '54',
    'decimalOpcode': '084',
    'binaryOpcode': '01010100',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '55',
    'decimalOpcode': '085',
    'binaryOpcode': '01010101',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '56',
    'decimalOpcode': '086',
    'binaryOpcode': '01010110',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '57',
    'decimalOpcode': '087',
    'binaryOpcode': '01010111',
    'mnemonic': 'MOV',
    'argument1': 'D',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '58',
    'decimalOpcode': '088',
    'binaryOpcode': '01011000',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '59',
    'decimalOpcode': '089',
    'binaryOpcode': '01011001',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5A',
    'decimalOpcode': '090',
    'binaryOpcode': '01011010',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5B',
    'decimalOpcode': '091',
    'binaryOpcode': '01011011',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5C',
    'decimalOpcode': '092',
    'binaryOpcode': '01011100',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5D',
    'decimalOpcode': '093',
    'binaryOpcode': '01011101',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5E',
    'decimalOpcode': '094',
    'binaryOpcode': '01011110',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '5F',
    'decimalOpcode': '095',
    'binaryOpcode': '01011111',
    'mnemonic': 'MOV',
    'argument1': 'E',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '60',
    'decimalOpcode': '096',
    'binaryOpcode': '01100000',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '61',
    'decimalOpcode': '097',
    'binaryOpcode': '01100001',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '62',
    'decimalOpcode': '098',
    'binaryOpcode': '01100010',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '63',
    'decimalOpcode': '099',
    'binaryOpcode': '01100011',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '64',
    'decimalOpcode': '100',
    'binaryOpcode': '01100100',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '65',
    'decimalOpcode': '101',
    'binaryOpcode': '01100101',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '66',
    'decimalOpcode': '102',
    'binaryOpcode': '01100110',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '67',
    'decimalOpcode': '103',
    'binaryOpcode': '01100111',
    'mnemonic': 'MOV',
    'argument1': 'H',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '68',
    'decimalOpcode': '104',
    'binaryOpcode': '01101000',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '69',
    'decimalOpcode': '105',
    'binaryOpcode': '01101001',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6A',
    'decimalOpcode': '106',
    'binaryOpcode': '01101010',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6B',
    'decimalOpcode': '107',
    'binaryOpcode': '01101011',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6C',
    'decimalOpcode': '108',
    'binaryOpcode': '01101100',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6D',
    'decimalOpcode': '109',
    'binaryOpcode': '01101101',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6E',
    'decimalOpcode': '110',
    'binaryOpcode': '01101110',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '6F',
    'decimalOpcode': '111',
    'binaryOpcode': '01101111',
    'mnemonic': 'MOV',
    'argument1': 'L',
    'argument2': 'A',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '70',
    'decimalOpcode': '112',
    'binaryOpcode': '01110000',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'B',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '71',
    'decimalOpcode': '113',
    'binaryOpcode': '01110001',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'C',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '72',
    'decimalOpcode': '114',
    'binaryOpcode': '01110010',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'D',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '73',
    'decimalOpcode': '115',
    'binaryOpcode': '01110011',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'E',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '74',
    'decimalOpcode': '116',
    'binaryOpcode': '01110100',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'H',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '75',
    'decimalOpcode': '117',
    'binaryOpcode': '01110101',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'L',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '77',
    'decimalOpcode': '119',
    'binaryOpcode': '01110111',
    'mnemonic': 'MOV',
    'argument1': 'M',
    'argument2': 'A',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '78',
    'decimalOpcode': '120',
    'binaryOpcode': '01111000',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'B',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '79',
    'decimalOpcode': '121',
    'binaryOpcode': '01111001',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'C',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7A',
    'decimalOpcode': '122',
    'binaryOpcode': '01111010',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'D',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7B',
    'decimalOpcode': '123',
    'binaryOpcode': '01111011',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'E',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7C',
    'decimalOpcode': '124',
    'binaryOpcode': '01111100',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'H',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7D',
    'decimalOpcode': '125',
    'binaryOpcode': '01111101',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'L',
    'cycles': '5',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7E',
    'decimalOpcode': '126',
    'binaryOpcode': '01111110',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'M',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '7F',
    'decimalOpcode': '127',
    'binaryOpcode': '01111111',
    'mnemonic': 'MOV',
    'argument1': 'A',
    'argument2': 'A',
    'cycles': '7',
    'mask': '01dddsss',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': '80',
    'decimalOpcode': '128',
    'binaryOpcode': '10000000',
    'mnemonic': 'ADD',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '81',
    'decimalOpcode': '129',
    'binaryOpcode': '10000001',
    'mnemonic': 'ADD',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '82',
    'decimalOpcode': '130',
    'binaryOpcode': '10000010',
    'mnemonic': 'ADD',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '83',
    'decimalOpcode': '131',
    'binaryOpcode': '10000011',
    'mnemonic': 'ADD',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '84',
    'decimalOpcode': '132',
    'binaryOpcode': '10000100',
    'mnemonic': 'ADD',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '85',
    'decimalOpcode': '133',
    'binaryOpcode': '10000101',
    'mnemonic': 'ADD',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '86',
    'decimalOpcode': '134',
    'binaryOpcode': '10000110',
    'mnemonic': 'ADD',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '87',
    'decimalOpcode': '135',
    'binaryOpcode': '10000111',
    'mnemonic': 'ADD',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '88',
    'decimalOpcode': '136',
    'binaryOpcode': '10001000',
    'mnemonic': 'ADC',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '89',
    'decimalOpcode': '137',
    'binaryOpcode': '10001001',
    'mnemonic': 'ADC',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8A',
    'decimalOpcode': '138',
    'binaryOpcode': '10001010',
    'mnemonic': 'ADC',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8B',
    'decimalOpcode': '139',
    'binaryOpcode': '10001011',
    'mnemonic': 'ADC',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8C',
    'decimalOpcode': '140',
    'binaryOpcode': '10001100',
    'mnemonic': 'ADC',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8D',
    'decimalOpcode': '141',
    'binaryOpcode': '10001101',
    'mnemonic': 'ADC',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8E',
    'decimalOpcode': '142',
    'binaryOpcode': '10001110',
    'mnemonic': 'ADC',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '8F',
    'decimalOpcode': '143',
    'binaryOpcode': '10001111',
    'mnemonic': 'ADC',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '90',
    'decimalOpcode': '144',
    'binaryOpcode': '10010000',
    'mnemonic': 'SUB',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '91',
    'decimalOpcode': '145',
    'binaryOpcode': '10010001',
    'mnemonic': 'SUB',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '92',
    'decimalOpcode': '146',
    'binaryOpcode': '10010010',
    'mnemonic': 'SUB',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '93',
    'decimalOpcode': '147',
    'binaryOpcode': '10010011',
    'mnemonic': 'SUB',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '94',
    'decimalOpcode': '148',
    'binaryOpcode': '10010100',
    'mnemonic': 'SUB',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '95',
    'decimalOpcode': '149',
    'binaryOpcode': '10010101',
    'mnemonic': 'SUB',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '96',
    'decimalOpcode': '150',
    'binaryOpcode': '10010110',
    'mnemonic': 'SUB',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '97',
    'decimalOpcode': '151',
    'binaryOpcode': '10010111',
    'mnemonic': 'SUB',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '98',
    'decimalOpcode': '152',
    'binaryOpcode': '10011000',
    'mnemonic': 'SBB',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '99',
    'decimalOpcode': '153',
    'binaryOpcode': '10011001',
    'mnemonic': 'SBB',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9A',
    'decimalOpcode': '154',
    'binaryOpcode': '10011010',
    'mnemonic': 'SBB',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9B',
    'decimalOpcode': '155',
    'binaryOpcode': '10011011',
    'mnemonic': 'SBB',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9C',
    'decimalOpcode': '156',
    'binaryOpcode': '10011100',
    'mnemonic': 'SBB',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9D',
    'decimalOpcode': '157',
    'binaryOpcode': '10011101',
    'mnemonic': 'SBB',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9E',
    'decimalOpcode': '158',
    'binaryOpcode': '10011110',
    'mnemonic': 'SBB',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': '9F',
    'decimalOpcode': '159',
    'binaryOpcode': '10011111',
    'mnemonic': 'SBB',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A0',
    'decimalOpcode': '160',
    'binaryOpcode': '10100000',
    'mnemonic': 'ANA',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A1',
    'decimalOpcode': '161',
    'binaryOpcode': '10100001',
    'mnemonic': 'ANA',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A2',
    'decimalOpcode': '162',
    'binaryOpcode': '10100010',
    'mnemonic': 'ANA',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A3',
    'decimalOpcode': '163',
    'binaryOpcode': '10100011',
    'mnemonic': 'ANA',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A4',
    'decimalOpcode': '164',
    'binaryOpcode': '10100100',
    'mnemonic': 'ANA',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A5',
    'decimalOpcode': '165',
    'binaryOpcode': '10100101',
    'mnemonic': 'ANA',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A6',
    'decimalOpcode': '166',
    'binaryOpcode': '10100110',
    'mnemonic': 'ANA',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A7',
    'decimalOpcode': '167',
    'binaryOpcode': '10100111',
    'mnemonic': 'ANA',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A8',
    'decimalOpcode': '168',
    'binaryOpcode': '10101000',
    'mnemonic': 'XRA',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'A9',
    'decimalOpcode': '169',
    'binaryOpcode': '10101001',
    'mnemonic': 'XRA',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AA',
    'decimalOpcode': '170',
    'binaryOpcode': '10101010',
    'mnemonic': 'XRA',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AB',
    'decimalOpcode': '171',
    'binaryOpcode': '10101011',
    'mnemonic': 'XRA',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AC',
    'decimalOpcode': '172',
    'binaryOpcode': '10101100',
    'mnemonic': 'XRA',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AD',
    'decimalOpcode': '173',
    'binaryOpcode': '10101101',
    'mnemonic': 'XRA',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AE',
    'decimalOpcode': '174',
    'binaryOpcode': '10101110',
    'mnemonic': 'XRA',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'AF',
    'decimalOpcode': '175',
    'binaryOpcode': '10101111',
    'mnemonic': 'XRA',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B0',
    'decimalOpcode': '176',
    'binaryOpcode': '10110000',
    'mnemonic': 'ORA',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B1',
    'decimalOpcode': '177',
    'binaryOpcode': '10110001',
    'mnemonic': 'ORA',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B2',
    'decimalOpcode': '178',
    'binaryOpcode': '10110010',
    'mnemonic': 'ORA',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B3',
    'decimalOpcode': '179',
    'binaryOpcode': '10110011',
    'mnemonic': 'ORA',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B4',
    'decimalOpcode': '180',
    'binaryOpcode': '10110100',
    'mnemonic': 'ORA',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B5',
    'decimalOpcode': '181',
    'binaryOpcode': '10110101',
    'mnemonic': 'ORA',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B6',
    'decimalOpcode': '182',
    'binaryOpcode': '10110110',
    'mnemonic': 'ORA',
    'argument1': 'M',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B7',
    'decimalOpcode': '183',
    'binaryOpcode': '10110111',
    'mnemonic': 'ORA',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B8',
    'decimalOpcode': '184',
    'binaryOpcode': '10111000',
    'mnemonic': 'CMP',
    'argument1': 'B',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'B9',
    'decimalOpcode': '185',
    'binaryOpcode': '10111001',
    'mnemonic': 'CMP',
    'argument1': 'C',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BA',
    'decimalOpcode': '186',
    'binaryOpcode': '10111010',
    'mnemonic': 'CMP',
    'argument1': 'D',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BB',
    'decimalOpcode': '187',
    'binaryOpcode': '10111011',
    'mnemonic': 'CMP',
    'argument1': 'E',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BC',
    'decimalOpcode': '188',
    'binaryOpcode': '10111100',
    'mnemonic': 'CMP',
    'argument1': 'H',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BD',
    'decimalOpcode': '189',
    'binaryOpcode': '10111101',
    'mnemonic': 'CMP',
    'argument1': 'L',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BE',
    'decimalOpcode': '190',
    'binaryOpcode': '10111110',
    'mnemonic': 'CMP',
    'argument1': 'M',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'BF',
    'decimalOpcode': '191',
    'binaryOpcode': '10111111',
    'mnemonic': 'CMP',
    'argument1': 'A',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'C0',
    'decimalOpcode': '192',
    'binaryOpcode': '11000000',
    'mnemonic': 'RNZ',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'C1',
    'decimalOpcode': '193',
    'binaryOpcode': '11000001',
    'mnemonic': 'POP',
    'argument1': 'B',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'C2',
    'decimalOpcode': '194',
    'binaryOpcode': '11000010',
    'mnemonic': 'JNZ',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'C3',
    'decimalOpcode': '195',
    'binaryOpcode': '11000011',
    'mnemonic': 'JMP',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '09',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'CB',
    'decimalOpcode': '203',
    'binaryOpcode': '11001011',
    'mnemonic': 'JMP?',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'undocumented, branching',
  },
  {
    'hexOpcode': 'C4',
    'decimalOpcode': '196',
    'binaryOpcode': '11000100',
    'mnemonic': 'CNZ',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'C5',
    'decimalOpcode': '197',
    'binaryOpcode': '11000101',
    'mnemonic': 'PUSH',
    'argument1': 'B',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'C6',
    'decimalOpcode': '198',
    'binaryOpcode': '11000110',
    'mnemonic': 'ADI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'C7',
    'decimalOpcode': '199',
    'binaryOpcode': '11000111',
    'mnemonic': 'RST',
    'argument1': '0',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'C8',
    'decimalOpcode': '200',
    'binaryOpcode': '11001000',
    'mnemonic': 'RZ',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'C9',
    'decimalOpcode': '201',
    'binaryOpcode': '11001001',
    'mnemonic': 'RET',
    'argument1': '',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D9',
    'decimalOpcode': '217',
    'binaryOpcode': '11011001',
    'mnemonic': 'RET?',
    'argument1': '',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'undocumented, branching',
  },
  {
    'hexOpcode': 'CA',
    'decimalOpcode': '202',
    'binaryOpcode': '11001010',
    'mnemonic': 'JZ',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'CC',
    'decimalOpcode': '204',
    'binaryOpcode': '11001100',
    'mnemonic': 'CZ',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'CD',
    'decimalOpcode': '205',
    'binaryOpcode': '11001101',
    'mnemonic': 'CALL',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'DD',
    'decimalOpcode': '221',
    'binaryOpcode': '11011101',
    'mnemonic': 'CALL?',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '17',
    'mask': '',
    'flags': '',
    'tags': 'undocumented, branching',
  },
  {
    'hexOpcode': 'ED',
    'decimalOpcode': '237',
    'binaryOpcode': '11101101',
    'mnemonic': 'CALL?',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '17',
    'mask': '',
    'flags': '',
    'tags': 'undocumented, branching',
  },
  {
    'hexOpcode': 'FD',
    'decimalOpcode': '253',
    'binaryOpcode': '11111101',
    'mnemonic': 'CALL?',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '17',
    'mask': '',
    'flags': '',
    'tags': 'undocumented, branching',
  },
  {
    'hexOpcode': 'CE',
    'decimalOpcode': '206',
    'binaryOpcode': '11001110',
    'mnemonic': 'ACI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'CF',
    'decimalOpcode': '207',
    'binaryOpcode': '11001111',
    'mnemonic': 'RST',
    'argument1': '1',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D0',
    'decimalOpcode': '208',
    'binaryOpcode': '11010000',
    'mnemonic': 'RNC',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D1',
    'decimalOpcode': '209',
    'binaryOpcode': '11010001',
    'mnemonic': 'POP',
    'argument1': 'D',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'D2',
    'decimalOpcode': '210',
    'binaryOpcode': '11010010',
    'mnemonic': 'JNC',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D3',
    'decimalOpcode': '211',
    'binaryOpcode': '11010011',
    'mnemonic': 'OUT',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'io',
  },
  {
    'hexOpcode': 'D4',
    'decimalOpcode': '212',
    'binaryOpcode': '11010100',
    'mnemonic': 'CNC',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D5',
    'decimalOpcode': '213',
    'binaryOpcode': '11010101',
    'mnemonic': 'PUSH',
    'argument1': 'D',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'D6',
    'decimalOpcode': '214',
    'binaryOpcode': '11010110',
    'mnemonic': 'SUI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'D7',
    'decimalOpcode': '215',
    'binaryOpcode': '11010111',
    'mnemonic': 'RST',
    'argument1': '2',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'D8',
    'decimalOpcode': '216',
    'binaryOpcode': '11011000',
    'mnemonic': 'RC',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'DA',
    'decimalOpcode': '218',
    'binaryOpcode': '11011010',
    'mnemonic': 'JC',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'DB',
    'decimalOpcode': '219',
    'binaryOpcode': '11011011',
    'mnemonic': 'IN',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '13',
    'mask': '',
    'flags': '',
    'tags': 'io',
  },
  {
    'hexOpcode': 'DC',
    'decimalOpcode': '220',
    'binaryOpcode': '11011100',
    'mnemonic': 'CC',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'DE',
    'decimalOpcode': '222',
    'binaryOpcode': '11011110',
    'mnemonic': 'SBI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'DF',
    'decimalOpcode': '223',
    'binaryOpcode': '11011111',
    'mnemonic': 'RST',
    'argument1': '3',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'E0',
    'decimalOpcode': '224',
    'binaryOpcode': '11100000',
    'mnemonic': 'RPO',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'E1',
    'decimalOpcode': '225',
    'binaryOpcode': '11100001',
    'mnemonic': 'POP',
    'argument1': 'H',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'E2',
    'decimalOpcode': '226',
    'binaryOpcode': '11100010',
    'mnemonic': 'JPO',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': 'E3',
    'decimalOpcode': '227',
    'binaryOpcode': '11100011',
    'mnemonic': 'XTHL',
    'argument1': '',
    'argument2': '',
    'cycles': '18',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'E4',
    'decimalOpcode': '228',
    'binaryOpcode': '11100100',
    'mnemonic': 'CPO',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': '',
  },
  {
    'hexOpcode': 'E5',
    'decimalOpcode': '229',
    'binaryOpcode': '11100101',
    'mnemonic': 'PUSH',
    'argument1': 'H',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'E6',
    'decimalOpcode': '230',
    'binaryOpcode': '11100110',
    'mnemonic': 'ANI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'E7',
    'decimalOpcode': '231',
    'binaryOpcode': '11100111',
    'mnemonic': 'RST',
    'argument1': '4',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'E8',
    'decimalOpcode': '232',
    'binaryOpcode': '11101000',
    'mnemonic': 'RPE',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'E9',
    'decimalOpcode': '233',
    'binaryOpcode': '11101001',
    'mnemonic': 'PCHL',
    'argument1': '',
    'argument2': '',
    'cycles': '5',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'EA',
    'decimalOpcode': '234',
    'binaryOpcode': '11101010',
    'mnemonic': 'JPE',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'EB',
    'decimalOpcode': '235',
    'binaryOpcode': '11101011',
    'mnemonic': 'XCHG',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'EC',
    'decimalOpcode': '236',
    'binaryOpcode': '11101100',
    'mnemonic': 'CPE',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'EE',
    'decimalOpcode': '238',
    'binaryOpcode': '11101110',
    'mnemonic': 'XRI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'EF',
    'decimalOpcode': '239',
    'binaryOpcode': '11101111',
    'mnemonic': 'RST',
    'argument1': '5',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F0',
    'decimalOpcode': '240',
    'binaryOpcode': '11110000',
    'mnemonic': 'RP',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F1',
    'decimalOpcode': '241',
    'binaryOpcode': '11110001',
    'mnemonic': 'POP',
    'argument1': 'PSW',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'F2',
    'decimalOpcode': '242',
    'binaryOpcode': '11110010',
    'mnemonic': 'JP',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F3',
    'decimalOpcode': '243',
    'binaryOpcode': '11110011',
    'mnemonic': 'DI',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': 'interrupt',
  },
  {
    'hexOpcode': 'F4',
    'decimalOpcode': '244',
    'binaryOpcode': '11110100',
    'mnemonic': 'CP',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F5',
    'decimalOpcode': '245',
    'binaryOpcode': '11110101',
    'mnemonic': 'PUSH',
    'argument1': 'PSW',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'F6',
    'decimalOpcode': '246',
    'binaryOpcode': '11110110',
    'mnemonic': 'ORI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'F7',
    'decimalOpcode': '247',
    'binaryOpcode': '11110111',
    'mnemonic': 'RST',
    'argument1': '6',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F8',
    'decimalOpcode': '248',
    'binaryOpcode': '11111000',
    'mnemonic': 'RM',
    'argument1': '',
    'argument2': '',
    'cycles': '5\/11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'F9',
    'decimalOpcode': '249',
    'binaryOpcode': '11111001',
    'mnemonic': 'SPHL',
    'argument1': '',
    'argument2': '',
    'cycles': '5',
    'mask': '',
    'flags': '',
    'tags': 'stack',
  },
  {
    'hexOpcode': 'FA',
    'decimalOpcode': '250',
    'binaryOpcode': '11111010',
    'mnemonic': 'JM',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '10',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'FB',
    'decimalOpcode': '251',
    'binaryOpcode': '11111011',
    'mnemonic': 'EI',
    'argument1': '',
    'argument2': '',
    'cycles': '4',
    'mask': '',
    'flags': '',
    'tags': 'interrupt',
  },
  {
    'hexOpcode': 'FC',
    'decimalOpcode': '252',
    'binaryOpcode': '11111100',
    'mnemonic': 'CM',
    'argument1': 'DATA16',
    'argument2': '',
    'cycles': '11\/17',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
  {
    'hexOpcode': 'FE',
    'decimalOpcode': '254',
    'binaryOpcode': '11111110',
    'mnemonic': 'CPI',
    'argument1': 'DATA8',
    'argument2': '',
    'cycles': '7',
    'mask': '',
    'flags': 'S Z A P C',
    'tags': '',
  },
  {
    'hexOpcode': 'FF',
    'decimalOpcode': '255',
    'binaryOpcode': '11111111',
    'mnemonic': 'RST',
    'argument1': '7',
    'argument2': '',
    'cycles': '11',
    'mask': '',
    'flags': '',
    'tags': 'branching',
  },
]

const second = {
  '0x00': {
    'Instruction': 'NOP',
    'size': '1',
    'flags': '',
    'function': '',
  },
  '0x01': {
    'Instruction': 'LXI B,D16',
    'size': '3',
    'flags': '',
    'function': 'B <- byte 3, C <- byte 2',
  },
  '0x02': {
    'Instruction': 'STAX B',
    'size': '1',
    'flags': '',
    'function': '(BC) <- A',
  },
  '0x03': {
    'Instruction': 'INX B',
    'size': '1',
    'flags': '',
    'function': 'BC <- BC+1',
  },
  '0x04': {
    'Instruction': 'INR B',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'B <- B+1',
  },
  '0x05': {
    'Instruction': 'DCR B',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'B <- B-1',
  },
  '0x06': {
    'Instruction': 'MVI B, D8',
    'size': '2',
    'flags': '',
    'function': 'B <- byte 2',
  },
  '0x07': {
    'Instruction': 'RLC',
    'size': '1',
    'flags': 'CY',
    'function': 'A = A << 1; bit 0 = prev bit 7; CY = prev bit 7',
  },
  '0x08': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x09': {
    'Instruction': 'DAD B',
    'size': '1',
    'flags': 'CY',
    'function': 'HL = HL + BC',
  },
  '0x0a': {
    'Instruction': 'LDAX B',
    'size': '1',
    'flags': '',
    'function': 'A <- (BC)',
  },
  '0x0b': {
    'Instruction': 'DCX B',
    'size': '1',
    'flags': '',
    'function': 'BC = BC-1',
  },
  '0x0c': {
    'Instruction': 'INR C',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'C <- C+1',
  },
  '0x0d': {
    'Instruction': 'DCR C',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'C <-C-1',
  },
  '0x0e': {
    'Instruction': 'MVI C,D8',
    'size': '2',
    'flags': '',
    'function': 'C <- byte 2',
  },
  '0x0f': {
    'Instruction': 'RRC',
    'size': '1',
    'flags': 'CY',
    'function': 'A = A >> 1; bit 7 = prev bit 0; CY = prev bit 0',
  },
  '0x10': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x11': {
    'Instruction': 'LXI D,D16',
    'size': '3',
    'flags': '',
    'function': 'D <- byte 3, E <- byte 2',
  },
  '0x12': {
    'Instruction': 'STAX D',
    'size': '1',
    'flags': '',
    'function': '(DE) <- A',
  },
  '0x13': {
    'Instruction': 'INX D',
    'size': '1',
    'flags': '',
    'function': 'DE <- DE + 1',
  },
  '0x14': {
    'Instruction': 'INR D',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'D <- D+1',
  },
  '0x15': {
    'Instruction': 'DCR D',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'D <- D-1',
  },
  '0x16': {
    'Instruction': 'MVI D, D8',
    'size': '2',
    'flags': '',
    'function': 'D <- byte 2',
  },
  '0x17': {
    'Instruction': 'RAL',
    'size': '1',
    'flags': 'CY',
    'function': 'A = A << 1; bit 0 = prev CY; CY = prev bit 7',
  },
  '0x18': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x19': {
    'Instruction': 'DAD D',
    'size': '1',
    'flags': 'CY',
    'function': 'HL = HL + DE',
  },
  '0x1a': {
    'Instruction': 'LDAX D',
    'size': '1',
    'flags': '',
    'function': 'A <- (DE)',
  },
  '0x1b': {
    'Instruction': 'DCX D',
    'size': '1',
    'flags': '',
    'function': 'DE = DE-1',
  },
  '0x1c': {
    'Instruction': 'INR E',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'E <-E+1',
  },
  '0x1d': {
    'Instruction': 'DCR E',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'E <- E-1',
  },
  '0x1e': {
    'Instruction': 'MVI E,D8',
    'size': '2',
    'flags': '',
    'function': 'E <- byte 2',
  },
  '0x1f': {
    'Instruction': 'RAR',
    'size': '1',
    'flags': 'CY',
    'function': 'A = A >> 1; bit 7 = prev bit 7; CY = prev bit 0',
  },
  '0x20': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x21': {
    'Instruction': 'LXI H,D16',
    'size': '3',
    'flags': '',
    'function': 'H <- byte 3, L <- byte 2',
  },
  '0x22': {
    'Instruction': 'SHLD adr',
    'size': '3',
    'flags': '',
    'function': '(adr) <-L; (adr+1)<-H',
  },
  '0x23': {
    'Instruction': 'INX H',
    'size': '1',
    'flags': '',
    'function': 'HL <- HL + 1',
  },
  '0x24': {
    'Instruction': 'INR H',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'H <- H+1',
  },
  '0x25': {
    'Instruction': 'DCR H',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'H <- H-1',
  },
  '0x26': {
    'Instruction': 'MVI H,D8',
    'size': '2',
    'flags': '',
    'function': 'H <- byte 2',
  },
  '0x27': {
    'Instruction': 'DAA',
    'size': '1',
    'flags': '',
    'function': 'special',
  },
  '0x28': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x29': {
    'Instruction': 'DAD H',
    'size': '1',
    'flags': 'CY',
    'function': 'HL = HL + HI',
  },
  '0x2a': {
    'Instruction': 'LHLD adr',
    'size': '3',
    'flags': '',
    'function': 'L <- (adr); H<-(adr+1)',
  },
  '0x2b': {
    'Instruction': 'DCX H',
    'size': '1',
    'flags': '',
    'function': 'HL = HL-1',
  },
  '0x2c': {
    'Instruction': 'INR L',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'L <- L+1',
  },
  '0x2d': {
    'Instruction': 'DCR L',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'L <- L-1',
  },
  '0x2e': {
    'Instruction': 'MVI L, D8',
    'size': '2',
    'flags': '',
    'function': 'L <- byte 2',
  },
  '0x2f': {
    'Instruction': 'CMA',
    'size': '1',
    'flags': '',
    'function': 'A <- !A',
  },
  '0x30': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x31': {
    'Instruction': 'LXI SP, D16',
    'size': '3',
    'flags': '',
    'function': 'SP.hi <- byte 3, SP.lo <- byte 2',
  },
  '0x32': {
    'Instruction': 'STA adr',
    'size': '3',
    'flags': '',
    'function': '(adr) <- A',
  },
  '0x33': {
    'Instruction': 'INX SP',
    'size': '1',
    'flags': '',
    'function': 'SP = SP + 1',
  },
  '0x34': {
    'Instruction': 'INR M',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': '(HL) <- (HL)+1',
  },
  '0x35': {
    'Instruction': 'DCR M',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': '(HL) <- (HL)-1',
  },
  '0x36': {
    'Instruction': 'MVI M,D8',
    'size': '2',
    'flags': '',
    'function': '(HL) <- byte 2',
  },
  '0x37': {
    'Instruction': 'STC',
    'size': '1',
    'flags': 'CY',
    'function': 'CY = 1',
  },
  '0x38': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0x39': {
    'Instruction': 'DAD SP',
    'size': '1',
    'flags': 'CY',
    'function': 'HL = HL + SP',
  },
  '0x3a': {
    'Instruction': 'LDA adr',
    'size': '3',
    'flags': '',
    'function': 'A <- (adr)',
  },
  '0x3b': {
    'Instruction': 'DCX SP',
    'size': '1',
    'flags': '',
    'function': 'SP = SP-1',
  },
  '0x3c': {
    'Instruction': 'INR A',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'A <- A+1',
  },
  '0x3d': {
    'Instruction': 'DCR A',
    'size': '1',
    'flags': 'Z, S, P, AC',
    'function': 'A <- A-1',
  },
  '0x3e': {
    'Instruction': 'MVI A,D8',
    'size': '2',
    'flags': '',
    'function': 'A <- byte 2',
  },
  '0x3f': {
    'Instruction': 'CMC',
    'size': '1',
    'flags': 'CY',
    'function': 'CY=!CY',
  },
  '0x40': {
    'Instruction': 'MOV B,B',
    'size': '1',
    'flags': '',
    'function': 'B <- B',
  },
  '0x41': {
    'Instruction': 'MOV B,C',
    'size': '1',
    'flags': '',
    'function': 'B <- C',
  },
  '0x42': {
    'Instruction': 'MOV B,D',
    'size': '1',
    'flags': '',
    'function': 'B <- D',
  },
  '0x43': {
    'Instruction': 'MOV B,E',
    'size': '1',
    'flags': '',
    'function': 'B <- E',
  },
  '0x44': {
    'Instruction': 'MOV B,H',
    'size': '1',
    'flags': '',
    'function': 'B <- H',
  },
  '0x45': {
    'Instruction': 'MOV B,L',
    'size': '1',
    'flags': '',
    'function': 'B <- L',
  },
  '0x46': {
    'Instruction': 'MOV B,M',
    'size': '1',
    'flags': '',
    'function': 'B <- (HL)',
  },
  '0x47': {
    'Instruction': 'MOV B,A',
    'size': '1',
    'flags': '',
    'function': 'B <- A',
  },
  '0x48': {
    'Instruction': 'MOV C,B',
    'size': '1',
    'flags': '',
    'function': 'C <- B',
  },
  '0x49': {
    'Instruction': 'MOV C,C',
    'size': '1',
    'flags': '',
    'function': 'C <- C',
  },
  '0x4a': {
    'Instruction': 'MOV C,D',
    'size': '1',
    'flags': '',
    'function': 'C <- D',
  },
  '0x4b': {
    'Instruction': 'MOV C,E',
    'size': '1',
    'flags': '',
    'function': 'C <- E',
  },
  '0x4c': {
    'Instruction': 'MOV C,H',
    'size': '1',
    'flags': '',
    'function': 'C <- H',
  },
  '0x4d': {
    'Instruction': 'MOV C,L',
    'size': '1',
    'flags': '',
    'function': 'C <- L',
  },
  '0x4e': {
    'Instruction': 'MOV C,M',
    'size': '1',
    'flags': '',
    'function': 'C <- (HL)',
  },
  '0x4f': {
    'Instruction': 'MOV C,A',
    'size': '1',
    'flags': '',
    'function': 'C <- A',
  },
  '0x50': {
    'Instruction': 'MOV D,B',
    'size': '1',
    'flags': '',
    'function': 'D <- B',
  },
  '0x51': {
    'Instruction': 'MOV D,C',
    'size': '1',
    'flags': '',
    'function': 'D <- C',
  },
  '0x52': {
    'Instruction': 'MOV D,D',
    'size': '1',
    'flags': '',
    'function': 'D <- D',
  },
  '0x53': {
    'Instruction': 'MOV D,E',
    'size': '1',
    'flags': '',
    'function': 'D <- E',
  },
  '0x54': {
    'Instruction': 'MOV D,H',
    'size': '1',
    'flags': '',
    'function': 'D <- H',
  },
  '0x55': {
    'Instruction': 'MOV D,L',
    'size': '1',
    'flags': '',
    'function': 'D <- L',
  },
  '0x56': {
    'Instruction': 'MOV D,M',
    'size': '1',
    'flags': '',
    'function': 'D <- (HL)',
  },
  '0x57': {
    'Instruction': 'MOV D,A',
    'size': '1',
    'flags': '',
    'function': 'D <- A',
  },
  '0x58': {
    'Instruction': 'MOV E,B',
    'size': '1',
    'flags': '',
    'function': 'E <- B',
  },
  '0x59': {
    'Instruction': 'MOV E,C',
    'size': '1',
    'flags': '',
    'function': 'E <- C',
  },
  '0x5a': {
    'Instruction': 'MOV E,D',
    'size': '1',
    'flags': '',
    'function': 'E <- D',
  },
  '0x5b': {
    'Instruction': 'MOV E,E',
    'size': '1',
    'flags': '',
    'function': 'E <- E',
  },
  '0x5c': {
    'Instruction': 'MOV E,H',
    'size': '1',
    'flags': '',
    'function': 'E <- H',
  },
  '0x5d': {
    'Instruction': 'MOV E,L',
    'size': '1',
    'flags': '',
    'function': 'E <- L',
  },
  '0x5e': {
    'Instruction': 'MOV E,M',
    'size': '1',
    'flags': '',
    'function': 'E <- (HL)',
  },
  '0x5f': {
    'Instruction': 'MOV E,A',
    'size': '1',
    'flags': '',
    'function': 'E <- A',
  },
  '0x60': {
    'Instruction': 'MOV H,B',
    'size': '1',
    'flags': '',
    'function': 'H <- B',
  },
  '0x61': {
    'Instruction': 'MOV H,C',
    'size': '1',
    'flags': '',
    'function': 'H <- C',
  },
  '0x62': {
    'Instruction': 'MOV H,D',
    'size': '1',
    'flags': '',
    'function': 'H <- D',
  },
  '0x63': {
    'Instruction': 'MOV H,E',
    'size': '1',
    'flags': '',
    'function': 'H <- E',
  },
  '0x64': {
    'Instruction': 'MOV H,H',
    'size': '1',
    'flags': '',
    'function': 'H <- H',
  },
  '0x65': {
    'Instruction': 'MOV H,L',
    'size': '1',
    'flags': '',
    'function': 'H <- L',
  },
  '0x66': {
    'Instruction': 'MOV H,M',
    'size': '1',
    'flags': '',
    'function': 'H <- (HL)',
  },
  '0x67': {
    'Instruction': 'MOV H,A',
    'size': '1',
    'flags': '',
    'function': 'H <- A',
  },
  '0x68': {
    'Instruction': 'MOV L,B',
    'size': '1',
    'flags': '',
    'function': 'L <- B',
  },
  '0x69': {
    'Instruction': 'MOV L,C',
    'size': '1',
    'flags': '',
    'function': 'L <- C',
  },
  '0x6a': {
    'Instruction': 'MOV L,D',
    'size': '1',
    'flags': '',
    'function': 'L <- D',
  },
  '0x6b': {
    'Instruction': 'MOV L,E',
    'size': '1',
    'flags': '',
    'function': 'L <- E',
  },
  '0x6c': {
    'Instruction': 'MOV L,H',
    'size': '1',
    'flags': '',
    'function': 'L <- H',
  },
  '0x6d': {
    'Instruction': 'MOV L,L',
    'size': '1',
    'flags': '',
    'function': 'L <- L',
  },
  '0x6e': {
    'Instruction': 'MOV L,M',
    'size': '1',
    'flags': '',
    'function': 'L <- (HL)',
  },
  '0x6f': {
    'Instruction': 'MOV L,A',
    'size': '1',
    'flags': '',
    'function': 'L <- A',
  },
  '0x70': {
    'Instruction': 'MOV M,B',
    'size': '1',
    'flags': '',
    'function': '(HL) <- B',
  },
  '0x71': {
    'Instruction': 'MOV M,C',
    'size': '1',
    'flags': '',
    'function': '(HL) <- C',
  },
  '0x72': {
    'Instruction': 'MOV M,D',
    'size': '1',
    'flags': '',
    'function': '(HL) <- D',
  },
  '0x73': {
    'Instruction': 'MOV M,E',
    'size': '1',
    'flags': '',
    'function': '(HL) <- E',
  },
  '0x74': {
    'Instruction': 'MOV M,H',
    'size': '1',
    'flags': '',
    'function': '(HL) <- H',
  },
  '0x75': {
    'Instruction': 'MOV M,L',
    'size': '1',
    'flags': '',
    'function': '(HL) <- L',
  },
  '0x76': {
    'Instruction': 'HLT',
    'size': '1',
    'flags': '',
    'function': 'special',
  },
  '0x77': {
    'Instruction': 'MOV M,A',
    'size': '1',
    'flags': '',
    'function': '(HL) <- A',
  },
  '0x78': {
    'Instruction': 'MOV A,B',
    'size': '1',
    'flags': '',
    'function': 'A <- B',
  },
  '0x79': {
    'Instruction': 'MOV A,C',
    'size': '1',
    'flags': '',
    'function': 'A <- C',
  },
  '0x7a': {
    'Instruction': 'MOV A,D',
    'size': '1',
    'flags': '',
    'function': 'A <- D',
  },
  '0x7b': {
    'Instruction': 'MOV A,E',
    'size': '1',
    'flags': '',
    'function': 'A <- E',
  },
  '0x7c': {
    'Instruction': 'MOV A,H',
    'size': '1',
    'flags': '',
    'function': 'A <- H',
  },
  '0x7d': {
    'Instruction': 'MOV A,L',
    'size': '1',
    'flags': '',
    'function': 'A <- L',
  },
  '0x7e': {
    'Instruction': 'MOV A,M',
    'size': '1',
    'flags': '',
    'function': 'A <- (HL)',
  },
  '0x7f': {
    'Instruction': 'MOV A,A',
    'size': '1',
    'flags': '',
    'function': 'A <- A',
  },
  '0x80': {
    'Instruction': 'ADD B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + B',
  },
  '0x81': {
    'Instruction': 'ADD C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + C',
  },
  '0x82': {
    'Instruction': 'ADD D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + D',
  },
  '0x83': {
    'Instruction': 'ADD E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + E',
  },
  '0x84': {
    'Instruction': 'ADD H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + H',
  },
  '0x85': {
    'Instruction': 'ADD L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + L',
  },
  '0x86': {
    'Instruction': 'ADD M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + (HL)',
  },
  '0x87': {
    'Instruction': 'ADD A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + A',
  },
  '0x88': {
    'Instruction': 'ADC B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + B + CY',
  },
  '0x89': {
    'Instruction': 'ADC C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + C + CY',
  },
  '0x8a': {
    'Instruction': 'ADC D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + D + CY',
  },
  '0x8b': {
    'Instruction': 'ADC E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + E + CY',
  },
  '0x8c': {
    'Instruction': 'ADC H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + H + CY',
  },
  '0x8d': {
    'Instruction': 'ADC L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + L + CY',
  },
  '0x8e': {
    'Instruction': 'ADC M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + (HL) + CY',
  },
  '0x8f': {
    'Instruction': 'ADC A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + A + CY',
  },
  '0x90': {
    'Instruction': 'SUB B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - B',
  },
  '0x91': {
    'Instruction': 'SUB C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - C',
  },
  '0x92': {
    'Instruction': 'SUB D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + D',
  },
  '0x93': {
    'Instruction': 'SUB E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - E',
  },
  '0x94': {
    'Instruction': 'SUB H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + H',
  },
  '0x95': {
    'Instruction': 'SUB L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - L',
  },
  '0x96': {
    'Instruction': 'SUB M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + (HL)',
  },
  '0x97': {
    'Instruction': 'SUB A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - A',
  },
  '0x98': {
    'Instruction': 'SBB B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - B - CY',
  },
  '0x99': {
    'Instruction': 'SBB C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - C - CY',
  },
  '0x9a': {
    'Instruction': 'SBB D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - D - CY',
  },
  '0x9b': {
    'Instruction': 'SBB E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - E - CY',
  },
  '0x9c': {
    'Instruction': 'SBB H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - H - CY',
  },
  '0x9d': {
    'Instruction': 'SBB L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - L - CY',
  },
  '0x9e': {
    'Instruction': 'SBB M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - (HL) - CY',
  },
  '0x9f': {
    'Instruction': 'SBB A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - A - CY',
  },
  '0xa0': {
    'Instruction': 'ANA B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & B',
  },
  '0xa1': {
    'Instruction': 'ANA C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & C',
  },
  '0xa2': {
    'Instruction': 'ANA D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & D',
  },
  '0xa3': {
    'Instruction': 'ANA E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & E',
  },
  '0xa4': {
    'Instruction': 'ANA H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & H',
  },
  '0xa5': {
    'Instruction': 'ANA L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & L',
  },
  '0xa6': {
    'Instruction': 'ANA M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & (HL)',
  },
  '0xa7': {
    'Instruction': 'ANA A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & A',
  },
  '0xa8': {
    'Instruction': 'XRA B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ B',
  },
  '0xa9': {
    'Instruction': 'XRA C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ C',
  },
  '0xaa': {
    'Instruction': 'XRA D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ D',
  },
  '0xab': {
    'Instruction': 'XRA E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ E',
  },
  '0xac': {
    'Instruction': 'XRA H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ H',
  },
  '0xad': {
    'Instruction': 'XRA L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ L',
  },
  '0xae': {
    'Instruction': 'XRA M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ (HL)',
  },
  '0xaf': {
    'Instruction': 'XRA A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ A',
  },
  '0xb0': {
    'Instruction': 'ORA B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | B',
  },
  '0xb1': {
    'Instruction': 'ORA C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | C',
  },
  '0xb2': {
    'Instruction': 'ORA D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | D',
  },
  '0xb3': {
    'Instruction': 'ORA E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | E',
  },
  '0xb4': {
    'Instruction': 'ORA H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | H',
  },
  '0xb5': {
    'Instruction': 'ORA L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | L',
  },
  '0xb6': {
    'Instruction': 'ORA M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | (HL)',
  },
  '0xb7': {
    'Instruction': 'ORA A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | A',
  },
  '0xb8': {
    'Instruction': 'CMP B',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - B',
  },
  '0xb9': {
    'Instruction': 'CMP C',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - C',
  },
  '0xba': {
    'Instruction': 'CMP D',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - D',
  },
  '0xbb': {
    'Instruction': 'CMP E',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - E',
  },
  '0xbc': {
    'Instruction': 'CMP H',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - H',
  },
  '0xbd': {
    'Instruction': 'CMP L',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - L',
  },
  '0xbe': {
    'Instruction': 'CMP M',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - (HL)',
  },
  '0xbf': {
    'Instruction': 'CMP A',
    'size': '1',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - A',
  },
  '0xc0': {
    'Instruction': 'RNZ',
    'size': '1',
    'flags': '',
    'function': 'if NZ, RET',
  },
  '0xc1': {
    'Instruction': 'POP B',
    'size': '1',
    'flags': '',
    'function': 'C <- (sp); B <- (sp+1); sp <- sp+2',
  },
  '0xc2': {
    'Instruction': 'JNZ adr',
    'size': '3',
    'flags': '',
    'function': 'if NZ, PC <- adr',
  },
  '0xc3': {
    'Instruction': 'JMP adr',
    'size': '3',
    'flags': '',
    'function': 'PC <= adr',
  },
  '0xc4': {
    'Instruction': 'CNZ adr',
    'size': '3',
    'flags': '',
    'function': 'if NZ, CALL adr',
  },
  '0xc5': {
    'Instruction': 'PUSH B',
    'size': '1',
    'flags': '',
    'function': '(sp-2)<-C; (sp-1)<-B; sp <- sp - 2',
  },
  '0xc6': {
    'Instruction': 'ADI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + byte',
  },
  '0xc7': {
    'Instruction': 'RST 0',
    'size': '1',
    'flags': '',
    'function': 'CALL $0',
  },
  '0xc8': {
    'Instruction': 'RZ',
    'size': '1',
    'flags': '',
    'function': 'if Z, RET',
  },
  '0xc9': {
    'Instruction': 'RET',
    'size': '1',
    'flags': '',
    'function': 'PC.lo <- (sp); PC.hi<-(sp+1); SP <- SP+2',
  },
  '0xca': {
    'Instruction': 'JZ adr',
    'size': '3',
    'flags': '',
    'function': 'if Z, PC <- adr',
  },
  '0xcb': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0xcc': {
    'Instruction': 'CZ adr',
    'size': '3',
    'flags': '',
    'function': 'if Z, CALL adr',
  },
  '0xcd': {
    'Instruction': 'CALL adr',
    'size': '3',
    'flags': '',
    'function': '(SP-1)<-PC.hi;(SP-2)<-PC.lo;SP<-SP-2;PC=adr',
  },
  '0xce': {
    'Instruction': 'ACI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A + data + CY',
  },
  '0xcf': {
    'Instruction': 'RST 1',
    'size': '1',
    'flags': '',
    'function': 'CALL $8',
  },
  '0xd0': {
    'Instruction': 'RNC',
    'size': '1',
    'flags': '',
    'function': 'if NCY, RET',
  },
  '0xd1': {
    'Instruction': 'POP D',
    'size': '1',
    'flags': '',
    'function': 'E <- (sp); D <- (sp+1); sp <- sp+2',
  },
  '0xd2': {
    'Instruction': 'JNC adr',
    'size': '3',
    'flags': '',
    'function': 'if NCY, PC<-adr',
  },
  '0xd3': {
    'Instruction': 'OUT D8',
    'size': '2',
    'flags': '',
    'function': 'special',
  },
  '0xd4': {
    'Instruction': 'CNC adr',
    'size': '3',
    'flags': '',
    'function': 'if NCY, CALL adr',
  },
  '0xd5': {
    'Instruction': 'PUSH D',
    'size': '1',
    'flags': '',
    'function': '(sp-2)<-E; (sp-1)<-D; sp <- sp - 2',
  },
  '0xd6': {
    'Instruction': 'SUI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - data',
  },
  '0xd7': {
    'Instruction': 'RST 2',
    'size': '1',
    'flags': '',
    'function': 'CALL $10',
  },
  '0xd8': {
    'Instruction': 'RC',
    'size': '1',
    'flags': '',
    'function': 'if CY, RET',
  },
  '0xd9': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0xda': {
    'Instruction': 'JC adr',
    'size': '3',
    'flags': '',
    'function': 'if CY, PC<-adr',
  },
  '0xdb': {
    'Instruction': 'IN D8',
    'size': '2',
    'flags': '',
    'function': 'special',
  },
  '0xdc': {
    'Instruction': 'CC adr',
    'size': '3',
    'flags': '',
    'function': 'if CY, CALL adr',
  },
  '0xdd': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0xde': {
    'Instruction': 'SBI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A - data - CY',
  },
  '0xdf': {
    'Instruction': 'RST 3',
    'size': '1',
    'flags': '',
    'function': 'CALL $18',
  },
  '0xe0': {
    'Instruction': 'RPO',
    'size': '1',
    'flags': '',
    'function': 'if PO, RET',
  },
  '0xe1': {
    'Instruction': 'POP H',
    'size': '1',
    'flags': '',
    'function': 'L <- (sp); H <- (sp+1); sp <- sp+2',
  },
  '0xe2': {
    'Instruction': 'JPO adr',
    'size': '3',
    'flags': '',
    'function': 'if PO, PC <- adr',
  },
  '0xe3': {
    'Instruction': 'XTHL',
    'size': '1',
    'flags': '',
    'function': 'L <-> (SP); H <-> (SP+1)',
  },
  '0xe4': {
    'Instruction': 'CPO adr',
    'size': '3',
    'flags': '',
    'function': 'if PO, CALL adr',
  },
  '0xe5': {
    'Instruction': 'PUSH H',
    'size': '1',
    'flags': '',
    'function': '(sp-2)<-L; (sp-1)<-H; sp <- sp - 2',
  },
  '0xe6': {
    'Instruction': 'ANI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A & data',
  },
  '0xe7': {
    'Instruction': 'RST 4',
    'size': '1',
    'flags': '',
    'function': 'CALL $20',
  },
  '0xe8': {
    'Instruction': 'RPE',
    'size': '1',
    'flags': '',
    'function': 'if PE, RET',
  },
  '0xe9': {
    'Instruction': 'PCHL',
    'size': '1',
    'flags': '',
    'function': 'PC.hi <- H; PC.lo <- L',
  },
  '0xea': {
    'Instruction': 'JPE adr',
    'size': '3',
    'flags': '',
    'function': 'if PE, PC <- adr',
  },
  '0xeb': {
    'Instruction': 'XCHG',
    'size': '1',
    'flags': '',
    'function': 'H <-> D; L <-> E',
  },
  '0xec': {
    'Instruction': 'CPE adr',
    'size': '3',
    'flags': '',
    'function': 'if PE, CALL adr',
  },
  '0xed': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0xee': {
    'Instruction': 'XRI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A ^ data',
  },
  '0xef': {
    'Instruction': 'RST 5',
    'size': '1',
    'flags': '',
    'function': 'CALL $28',
  },
  '0xf0': {
    'Instruction': 'RP',
    'size': '1',
    'flags': '',
    'function': 'if P, RET',
  },
  '0xf1': {
    'Instruction': 'POP PSW',
    'size': '1',
    'flags': '',
    'function': 'flags <- (sp); A <- (sp+1); sp <- sp+2',
  },
  '0xf2': {
    'Instruction': 'JP adr',
    'size': '3',
    'flags': '',
    'function': 'if P=1 PC <- adr',
  },
  '0xf3': {
    'Instruction': 'DI',
    'size': '1',
    'flags': '',
    'function': 'special',
  },
  '0xf4': {
    'Instruction': 'CP adr',
    'size': '3',
    'flags': '',
    'function': 'if P, PC <- adr',
  },
  '0xf5': {
    'Instruction': 'PUSH PSW',
    'size': '1',
    'flags': '',
    'function': '(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2',
  },
  '0xf6': {
    'Instruction': 'ORI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A <- A | data',
  },
  '0xf7': {
    'Instruction': 'RST 6',
    'size': '1',
    'flags': '',
    'function': 'CALL $30',
  },
  '0xf8': {
    'Instruction': 'RM',
    'size': '1',
    'flags': '',
    'function': 'if M, RET',
  },
  '0xf9': {
    'Instruction': 'SPHL',
    'size': '1',
    'flags': '',
    'function': 'SP=HL',
  },
  '0xfa': {
    'Instruction': 'JM adr',
    'size': '3',
    'flags': '',
    'function': 'if M, PC <- adr',
  },
  '0xfb': {
    'Instruction': 'EI',
    'size': '1',
    'flags': '',
    'function': 'special',
  },
  '0xfc': {
    'Instruction': 'CM adr',
    'size': '3',
    'flags': '',
    'function': 'if M, CALL adr',
  },
  '0xfd': {
    'Instruction': '-',
    'size': '',
    'flags': '',
    'function': '',
  },
  '0xfe': {
    'Instruction': 'CPI D8',
    'size': '2',
    'flags': 'Z, S, P, CY, AC',
    'function': 'A - data',
  },
  '0xff': {
    'Instruction': 'RST 7',
    'size': '1',
    'flags': '',
    'function': 'CALL $38',
  },
}

const third = {
  '12': {
    'command': 'STAX D',
    'description': 'Записать A по адресу Loc(DE)',
  },
  '13': {
    'command': 'INX D',
    'description': 'Инкрементировать DE',
  },
  '14': {
    'command': 'INR D',
    'description': 'Инкрементировать D',
  },
  '15': {
    'command': 'DCR D',
    'description': 'D←(D) - 1',
  },
  '16': {
    'command': 'MVI D,d8',
    'description': 'Переслать d8 в D',
  },
  '17': {
    'command': 'RAL',
    'description': 'Циклический сдвиг CY + A влево',
  },
  '19': {
    'command': 'DAD D',
    'description': 'Сложить DE с HL',
  },
  '20': {
    'command': 'RIM',
    'description': 'Считать маску прерывания (только в 8085)',
  },
  '21': {
    'command': 'LXI H,d16',
    'description': 'Загрузить в HL непосредственные данные d16',
  },
  '22': {
    'command': 'SHLD a16',
    'description': 'Записать HL по адресу a16',
  },
  '23': {
    'command': 'INX H',
    'description': 'Инкрементировать HL',
  },
  '24': {
    'command': 'INR H',
    'description': 'Инкрементировать H',
  },
  '25': {
    'command': 'DCR H',
    'description': 'H←(H) - 1',
  },
  '26': {
    'command': 'MVI H,d8',
    'description': 'Переслать d8 в H',
  },
  '27': {
    'command': 'DAA',
    'description': 'Десятичная коррекция аккумулятора (совершенно бесполезная команда. Я так и ни разу ей и не воспользовался:)',
  },
  '29': {
    'command': 'DAD H',
    'description': 'Сложить HL с HL (удвоение HL)',
  },
  '30': {
    'command': 'SIM',
    'description': 'Установить маску прерывания (только в 8085)',
  },
  '31': {
    'command': 'LXI SP,d16',
    'description': 'Загрузить в SP непосредственные данные d16',
  },
  '32': {
    'command': 'STA a16',
    'description': 'Записать A по адресу a16',
  },
  '33': {
    'command': 'INX SP',
    'description': 'Инкрементировать SP',
  },
  '34': {
    'command': 'INR M',
    'description': 'Инкрементировать содержимое Loc(HL)',
  },
  '35': {
    'command': 'DCR M',
    'description': 'Loc (HL)←(Loc(HL)) -1',
  },
  '36': {
    'command': 'MVI M,d8',
    'description': 'Переслать d8 в Loc(HL)',
  },
  '37': {
    'command': 'STC',
    'description': 'Установить флаг переноса (CF=1)',
  },
  '39': {
    'command': 'DAD SP',
    'description': 'Сложить SP с HL',
  },
  '40': {
    'command': 'MOV B,B',
    'description': 'Переслать из B в B     (ещё одна странная команда)',
  },
  '41': {
    'command': 'MOV B,C',
    'description': 'Переслать из  C в B',
  },
  '42': {
    'command': 'MOV B,D',
    'description': 'Переслать из  D в B',
  },
  '43': {
    'command': 'MOV B,E',
    'description': 'Переслать из  E в B',
  },
  '44': {
    'command': 'MOV B,H',
    'description': 'Переслать из  H в B',
  },
  '45': {
    'command': 'MOV B,L',
    'description': 'Переслать из  L в B',
  },
  '46': {
    'command': 'MOV B,M',
    'description': 'Переслать из Loc(HL) в B',
  },
  '47': {
    'command': 'MOV B,A',
    'description': 'Переслать из A в B',
  },
  '48': {
    'command': 'MOV C,B',
    'description': 'Переслать из B в C',
  },
  '49': {
    'command': 'MOV C,C',
    'description': 'Переслать из  C в C',
  },
  '50': {
    'command': 'MOV D,B',
    'description': 'Переслать из  B в D',
  },
  '51': {
    'command': 'MOV D,C',
    'description': 'Переслать из  C в D',
  },
  '52': {
    'command': 'MOV D,D',
    'description': 'Переслать из D в D',
  },
  '53': {
    'command': 'MOV D,E',
    'description': 'Переслать из  E в D',
  },
  '54': {
    'command': 'MOV D,H',
    'description': 'Переслать из  H в D',
  },
  '55': {
    'command': 'MOV D,L',
    'description': 'Переслать из  L в D',
  },
  '56': {
    'command': 'MOV D,M',
    'description': 'Переслать из  Loc(HL) в D',
  },
  '57': {
    'command': 'MOV D,A',
    'description': 'Переслать из   A в D',
  },
  '58': {
    'command': 'MOV E,B',
    'description': 'Переслать из B  в E',
  },
  '59': {
    'command': 'MOV E,C',
    'description': 'Переслать из  C  в E',
  },
  '60': {
    'command': 'MOV H,B',
    'description': 'Переслать из  B в H',
  },
  '61': {
    'command': 'MOV H,C',
    'description': 'Переслать из  C в H',
  },
  '62': {
    'command': 'MOV H,D',
    'description': 'Переслать из  D в H',
  },
  '63': {
    'command': 'MOV H,E',
    'description': 'Переслать из  E в H',
  },
  '64': {
    'command': 'MOV H,H',
    'description': 'Переслать из H в H',
  },
  '65': {
    'command': 'MOV H,L',
    'description': 'Переслать из  L в H',
  },
  '66': {
    'command': 'MOV H,M',
    'description': 'Переслать из  Loc(HL) в H',
  },
  '67': {
    'command': 'MOV H,A',
    'description': 'Переслать из  A в H',
  },
  '68': {
    'command': 'MOV L,B',
    'description': 'Переслать из B в L',
  },
  '69': {
    'command': 'MOV L,C',
    'description': 'Переслать из C в L',
  },
  '70': {
    'command': 'MOV M,B',
    'description': 'Переслать из  B в M',
  },
  '71': {
    'command': 'MOV M,C',
    'description': 'Переслать из  C в M',
  },
  '72': {
    'command': 'MOV M,D',
    'description': 'Переслать из  D в M',
  },
  '73': {
    'command': 'MOV M,E',
    'description': 'Переслать из  E в M',
  },
  '74': {
    'command': 'MOV M,H',
    'description': 'Переслать из  H в M',
  },
  '75': {
    'command': 'MOV M,L',
    'description': 'Переслать из  L в M',
  },
  '76': {
    'command': 'HLT',
    'description': 'Останов процессора',
  },
  '77': {
    'command': 'MOV M,A',
    'description': 'Переслать из  A в M',
  },
  '78': {
    'command': 'MOV A,B',
    'description': 'Переслать из B в A (B←(A) )',
  },
  '79': {
    'command': 'MOV A,C',
    'description': 'Переслать из C в  A',
  },
  '80': {
    'command': 'ADD B',
    'description': 'A←(B) + (A)',
  },
  '81': {
    'command': 'ADD C',
    'description': 'A←(C) + (A)',
  },
  '82': {
    'command': 'ADD D',
    'description': 'A←(D) + (A)',
  },
  '83': {
    'command': 'ADD E',
    'description': 'A←(E) + (A)',
  },
  '84': {
    'command': 'ADD H',
    'description': 'A←(H) + (A)',
  },
  '85': {
    'command': 'ADD L',
    'description': 'A←(L) + (A)',
  },
  '86': {
    'command': 'ADD M',
    'description': 'A←Loc(HL) + (A)',
  },
  '87': {
    'command': 'ADD A',
    'description': 'A←(A) + (A)',
  },
  '88': {
    'command': 'ADC B',
    'description': 'A←(B) + (A) + CY',
  },
  '89': {
    'command': 'ADC C',
    'description': 'A←(C) + (A) + CY',
  },
  '90': {
    'command': 'SUB B',
    'description': 'Вычесть B из А',
  },
  '91': {
    'command': 'SUB C',
    'description': 'Вычесть C из А',
  },
  '92': {
    'command': 'SUB D',
    'description': 'Вычесть D из А',
  },
  '93': {
    'command': 'SUB E',
    'description': 'Вычесть E из А',
  },
  '94': {
    'command': 'SUB H',
    'description': 'Вычесть H из А',
  },
  '95': {
    'command': 'SUB L',
    'description': 'Вычесть L из А',
  },
  '96': {
    'command': 'SUB M',
    'description': 'Вычесть M из А',
  },
  '97': {
    'command': 'SUB A',
    'description': 'Вычесть А из А (очистить А)',
  },
  '98': {
    'command': 'SBB B',
    'description': 'Вычесть c заёмом B из А',
  },
  '99': {
    'command': 'SBB C',
    'description': 'Вычесть c заёмом C из А',
  },
  'C6': {
    'command': 'ADI d8',
    'description': 'A←d8 + (A)',
  },
  '8F': {
    'command': 'ADC A',
    'description': 'A←(A) + (A) + CY',
  },
  '8A': {
    'command': 'ADC D',
    'description': 'A←(D) + (A) + CY',
  },
  '8B': {
    'command': 'ADC E',
    'description': 'A←(E) + (A) + CY',
  },
  '8C': {
    'command': 'ADC H',
    'description': 'A←(H) + (A) + CY',
  },
  '8D': {
    'command': 'ADC L',
    'description': 'A←(L) + (A) + CY',
  },
  '8E': {
    'command': 'ADC M',
    'description': 'A←Loc(HL) + (A) + CY',
  },
  'CE': {
    'command': 'ACI d8',
    'description': 'A←d8 + (A) + CF',
  },
  'A7': {
    'command': 'ANA A',
    'description': 'Проверка A',
  },
  'A0': {
    'command': 'ANA B',
    'description': 'Логическое И B с A',
  },
  'A1': {
    'command': 'ANA C',
    'description': 'Логическое И C с A',
  },
  'A2': {
    'command': 'ANA D',
    'description': 'Логическое И D с A',
  },
  'A3': {
    'command': 'ANA E',
    'description': 'Логическое И E с A',
  },
  'A4': {
    'command': 'ANA H',
    'description': 'Логическое И H с A',
  },
  'A5': {
    'command': 'ANA L',
    'description': 'Логическое И L с A',
  },
  'A6': {
    'command': 'ANA M',
    'description': 'Логическое И Loc(HL) с A',
  },
  'E6': {
    'command': 'ANI d8',
    'description': 'Логическое И непосредственные данные с A',
  },
  'CD': {
    'command': 'CALL a16',
    'description': 'Передать управление подпрограмме по адресу a16',
  },
  'CC': {
    'command': 'CZ a16',
    'description': 'Вызвать подпрограмму по адресу a16, если нуль',
  },
  'C4': {
    'command': 'СNZ a16',
    'description': 'То же, если не нуль',
  },
  'F4': {
    'command': 'СP a16',
    'description': 'То же, если плюс',
  },
  'FC': {
    'command': 'СM a16',
    'description': 'То же, если минус',
  },
  'DC': {
    'command': 'CC a16',
    'description': 'То же, если перенос',
  },
  'D4': {
    'command': 'CNC a16',
    'description': 'То же, если нет переноса',
  },
  'EC': {
    'command': 'CPE a16',
    'description': 'То же, если чётно',
  },
  'E4': {
    'command': 'CPO a16',
    'description': 'То же, если нечётно',
  },
  '2F': {
    'command': 'CMA',
    'description': 'Инвертировать A',
  },
  '3F': {
    'command': 'CMC',
    'description': 'Инвертировать перенос',
  },
  'BF': {
    'command': 'CMP A',
    'description': 'Установить флаг FZ',
  },
  'B8': {
    'command': 'CMP B',
    'description': 'Сравнить A с B',
  },
  'B9': {
    'command': 'CMP C',
    'description': 'Сравнить A с C',
  },
  'BA': {
    'command': 'CMP D',
    'description': 'Сравнить A с D',
  },
  'BB': {
    'command': 'CMP E',
    'description': 'Сравнить A с E',
  },
  'BC': {
    'command': 'CMP H',
    'description': 'Сравнить A с H',
  },
  'BD': {
    'command': 'CMP L',
    'description': 'Сравнить A с L',
  },
  'BE': {
    'command': 'CMP M',
    'description': 'Сравнить A с Loc(HL)',
  },
  'FE': {
    'command': 'CPI d8',
    'description': 'Сравнить A с непосредственными данными, заданными в команде',
  },
  '09': {
    'command': 'DAD B',
    'description': 'Сложить BC с HL',
  },
  '3D': {
    'command': 'DCR A',
    'description': 'A←(A) - 1 (декремент A)',
  },
  '05': {
    'command': 'DCR B',
    'description': 'B←(B) - 1',
  },
  '0D': {
    'command': 'DCR C',
    'description': 'C←(C) - 1',
  },
  '1D': {
    'command': 'DCR E',
    'description': 'E←(E) - 1',
  },
  '2D': {
    'command': 'DCR L',
    'description': 'L←(L) - 1',
  },
  '0B': {
    'command': 'DCX B',
    'description': 'BC←(BC) - 1',
  },
  '1B': {
    'command': 'DCX D',
    'description': 'DE←(DE) -1',
  },
  '2B': {
    'command': 'DCX H',
    'description': 'HL←(HL) - 1',
  },
  '3B': {
    'command': 'DCX SP',
    'description': 'SP←(SP) -1',
  },
  'F3': {
    'command': 'DI',
    'description': 'Запретить прерывания',
  },
  'FB': {
    'command': 'EI',
    'description': 'Разрешить прерывания',
  },
  'DB': {
    'command': 'IN pp',
    'description': 'Ввести данные из порта pp',
  },
  '3C': {
    'command': 'INR A',
    'description': 'A←(A) + 1 (инкрементировать A)',
  },
  '04': {
    'command': 'INR B',
    'description': 'Инкрементировать B',
  },
  '0C': {
    'command': 'INR C',
    'description': 'Инкрементировать C',
  },
  '1C': {
    'command': 'INR E',
    'description': 'Инкрементировать E',
  },
  '2C': {
    'command': 'INR L',
    'description': 'Инкрементировать L',
  },
  '03': {
    'command': 'INX B',
    'description': 'Инкрементировать BС',
  },
  'C3': {
    'command': 'JMP a16',
    'description': 'Перейти по адресу a16',
  },
  'CA': {
    'command': 'JZ a16',
    'description': 'То же, если нуль',
  },
  'C2': {
    'command': 'JNZ a16',
    'description': 'То же, если не нуль',
  },
  'F2': {
    'command': 'JP a16',
    'description': 'То же, если плюс',
  },
  'FA': {
    'command': 'JM a16',
    'description': 'То же, если минус',
  },
  'DA': {
    'command': 'JC a16',
    'description': 'То же, если перенос',
  },
  'D2': {
    'command': 'JNC a16',
    'description': 'То же, если нет переноса',
  },
  'EA': {
    'command': 'JPE a16',
    'description': 'Перейти по адресу a16, если паритет чётный',
  },
  'E2': {
    'command': 'JPO a16',
    'description': 'Перейти по адресу a16, если паритет нечётный',
  },
  '3A': {
    'command': 'LDA a16',
    'description': 'Загрузить A из     ячейки   с адресом a16',
  },
  '0A': {
    'command': 'LDAX B',
    'description': 'Загрузить A из ячейки  с адресом Loc(BC)',
  },
  '1A': {
    'command': 'LDAX D',
    'description': 'Загрузить A из ячейки с адресом Loc(DE)',
  },
  '2A': {
    'command': 'LHLD a16',
    'description': 'Загрузить в HL содержимое ячейки с адресом a16',
  },
  '01': {
    'command': 'LXI B,d16',
    'description': 'Загрузить в BC непосредственные данные d16',
  },
  '7F': {
    'command': 'MOV A,A',
    'description': 'Переслать из A в A',
  },
  '7A': {
    'command': 'MOV A,D',
    'description': 'Переслать из  D в  A',
  },
  '7B': {
    'command': 'MOV A,E',
    'description': 'Переслать из  E в  A',
  },
  '7C': {
    'command': 'MOV A,H',
    'description': 'Переслать из  H в  A',
  },
  '7D': {
    'command': 'MOV A,L',
    'description': 'Переслать из  L в  A',
  },
  '7E': {
    'command': 'MOV A,M',
    'description': 'Переслать из Loc(HL) в  A',
  },
  '4F': {
    'command': 'MOV C,A',
    'description': 'Переслать из  A в C',
  },
  '4A': {
    'command': 'MOV C,D',
    'description': 'Переслать из  D в C',
  },
  '4B': {
    'command': 'MOV C,E',
    'description': 'Переслать из  E  в C',
  },
  '4C': {
    'command': 'MOV C,H',
    'description': 'Переслать из  H  в C',
  },
  '4D': {
    'command': 'MOV C,L',
    'description': 'Переслать из  L  в C',
  },
  '4E': {
    'command': 'MOV C,M',
    'description': 'Переслать из  Loc(HL)  в C',
  },
  '5F': {
    'command': 'MOV E,A',
    'description': 'Переслать из  A в E',
  },
  '5A': {
    'command': 'MOV E,D',
    'description': 'Переслать из  D в E',
  },
  '5B': {
    'command': 'MOV E,E',
    'description': 'Переслать из E в E',
  },
  '5C': {
    'command': 'MOV E,H',
    'description': 'Переслать из  H в E',
  },
  '5D': {
    'command': 'MOV E,L',
    'description': 'Переслать из  L в E',
  },
  '5E': {
    'command': 'MOV E,M',
    'description': 'Переслать из Loc(HL) в E',
  },
  '6F': {
    'command': 'MOV L,A',
    'description': 'Переслать из A в L',
  },
  '6A': {
    'command': 'MOV L,D',
    'description': 'Переслать из D в L',
  },
  '6B': {
    'command': 'MOV L,E',
    'description': 'Переслать из E в L',
  },
  '6C': {
    'command': 'MOV L,H',
    'description': 'Переслать из H в L',
  },
  '6D': {
    'command': 'MOV L,L',
    'description': 'Переслать из L в L',
  },
  '6E': {
    'command': 'MOV L,M',
    'description': 'Переслать из Loc(HL) в L',
  },
  '3E': {
    'command': 'MVI A,d8',
    'description': 'Переслать d8 в A',
  },
  '06': {
    'command': 'MVI B,d8',
    'description': 'Переслать d8 в B',
  },
  '0E': {
    'command': 'MVI C,d8',
    'description': 'Переслать d8 в C',
  },
  '1E': {
    'command': 'MVI E,d8',
    'description': 'Переслать d8 в E',
  },
  '2E': {
    'command': 'MVI L,d8',
    'description': 'Переслать d8 в L',
  },
  '00': {
    'command': 'NOP',
    'description': 'Нет операции',
  },
  'B7': {
    'command': 'ORA A',
    'description': 'Проверить A и сбросить перенос',
  },
  'B0': {
    'command': 'ORA B',
    'description': 'Логичеcкая операция A  ИЛИ B',
  },
  'B1': {
    'command': 'ORA C',
    'description': 'Логичеcкая операция A  ИЛИ C',
  },
  'B2': {
    'command': 'ORA D',
    'description': 'Логичеcкая операция A  ИЛИ D',
  },
  'B3': {
    'command': 'ORA E',
    'description': 'Логичеcкая операция A  ИЛИ E',
  },
  'B4': {
    'command': 'ORA H',
    'description': 'Логичеcкая операция A  ИЛИ H',
  },
  'B5': {
    'command': 'ORA L',
    'description': 'Логичеcкая операция A  ИЛИ L',
  },
  'B6': {
    'command': 'ORA M',
    'description': 'Логичеcкая операция A  ИЛИ M',
  },
  'F6': {
    'command': 'ORI d8',
    'description': 'Логичеcкая операция A  ИЛИ d8',
  },
  'D3': {
    'command': 'OUT pp',
    'description': 'Записать A в порт pp',
  },
  'E9': {
    'command': 'PCHL',
    'description': 'Передать управление по адресу в HL',
  },
  'C1': {
    'command': 'POP B',
    'description': 'Извлечь слово из стека в BC',
  },
  'D1': {
    'command': 'POP D',
    'description': 'Извлечь слово из стека в DE',
  },
  'E1': {
    'command': 'POP H',
    'description': 'Извлечь слово из стека в HL',
  },
  'F1': {
    'command': 'POP PSW',
    'description': 'Извлечь слово из стека в PSW',
  },
  'C5': {
    'command': 'PUSH B',
    'description': 'Поместить в стек содержимое BC',
  },
  'D5': {
    'command': 'PUSH D',
    'description': 'Поместить в стек содержимое DE',
  },
  'E5': {
    'command': 'PUSH H',
    'description': 'Поместить в стек содержимое HL',
  },
  'F5': {
    'command': 'PUSH PSW',
    'description': 'Поместить в стек содержимое PSW',
  },
  '1F': {
    'command': 'RAR',
    'description': 'Циклический сдвиг CY + A вправо',
  },
  '07': {
    'command': 'RLC',
    'description': 'Сдвинуть A влево на один разряд с переносом',
  },
  '0F': {
    'command': 'RRC',
    'description': 'Сдвинуть A вправо на один разряд с переносом',
  },
  'C9': {
    'command': 'RET',
    'description': 'Возврат из подпрограммы',
  },
  'C8': {
    'command': 'RZ',
    'description': 'Возврат из подпрограммы, если FZ=0',
  },
  'C0': {
    'command': 'RNZ',
    'description': 'Возврат из подпрограммы, если FZ=1',
  },
  'F0': {
    'command': 'RP',
    'description': 'Возврат из подпрограммы, если FP=1',
  },
  'F8': {
    'command': 'RM',
    'description': 'Возврат из подпрограммы, если FP=0',
  },
  'D8': {
    'command': 'RC',
    'description': 'Возврат из подпрограммы, если FC=1',
  },
  'D0': {
    'command': 'RNC',
    'description': 'Возврат из подпрограммы, если FC=0',
  },
  'E8': {
    'command': 'RPE',
    'description': 'Возврат из подпрограммы, если паритет чётный',
  },
  'E0': {
    'command': 'RPO',
    'description': 'Возврат из подпрограммы, если паритет нечётный',
  },
  'C7': {
    'command': 'RST 0',
    'description': 'Запуск программы с адреса 0',
  },
  'CF': {
    'command': 'RST 1',
    'description': 'Запуск программы с адреса 8h',
  },
  'D7': {
    'command': 'RST 2',
    'description': 'Запуск программы с адреса 10h',
  },
  'DF': {
    'command': 'RST 3',
    'description': 'Запуск программы с адреса 18h',
  },
  'E7': {
    'command': 'RST 4',
    'description': 'Запуск программы с адреса 20h',
  },
  'EF': {
    'command': 'RST 5',
    'description': 'Запуск программы с адреса 28h',
  },
  'F7': {
    'command': 'RST 6',
    'description': 'Запуск программы с адреса 30h',
  },
  'FF': {
    'command': 'RST 7',
    'description': 'Запуск программы с адреса 38h',
  },
  'F9': {
    'command': 'SPHL',
    'description': 'Загрузить SP из HL',
  },
  '02': {
    'command': 'STAX B',
    'description': 'Записать A по адресу Loc(BC)',
  },
  'D6': {
    'command': 'SUI d8',
    'description': 'Вычесть d8 из А',
  },
  '9F': {
    'command': 'SBB A',
    'description': 'Вычесть А из А (очистить А)',
  },
  '9A': {
    'command': 'SBB D',
    'description': 'Вычесть c заёмом D из А',
  },
  '9B': {
    'command': 'SBB E',
    'description': 'Вычесть c заёмом E из А',
  },
  '9C': {
    'command': 'SBB H',
    'description': 'Вычесть c заёмом H из А',
  },
  '9D': {
    'command': 'SBB L',
    'description': 'Вычесть c заёмом L из А',
  },
  '9E': {
    'command': 'SBB M',
    'description': 'Вычесть c заёмом M из А',
  },
  'DE': {
    'command': 'SBI d8',
    'description': 'Вычесть c заемом d8 из А',
  },
  'EB': {
    'command': 'XCHG',
    'description': 'Обмен содержимым DE и HL',
  },
  'E3': {
    'command': 'XTHL',
    'description': 'Обмен содержимого вершины стека с содержимым HL',
  },
  'AF': {
    'command': 'XRA A',
    'description': 'Исключающее ИЛИ A с A (очистка A)',
  },
  'A8': {
    'command': 'XRA B',
    'description': 'Исключающее ИЛИ B с A',
  },
  'A9': {
    'command': 'XRA C',
    'description': 'Исключающее ИЛИ C с A',
  },
  'AA': {
    'command': 'XRA D',
    'description': 'Исключающее ИЛИ D с A',
  },
  'AB': {
    'command': 'XRA E',
    'description': 'Исключающее ИЛИ E с A',
  },
  'AC': {
    'command': 'XRA H',
    'description': 'Исключающее ИЛИ H с A',
  },
  'AD': {
    'command': 'XRA L',
    'description': 'Исключающее ИЛИ L с A',
  },
  'AE': {
    'command': 'XRA M',
    'description': 'Исключающее ИЛИ Loc(HL) с A',
  },
  'EE': {
    'command': 'XRI d8',
    'description': 'Исключающее ИЛИ d8 с A',
  },
}

const cfirst = first.sort((a, b) => +a.decimalOpcode - b.decimalOpcode)

const res = cfirst.map(x => {
  const y = second['0x' + x.hexOpcode.toLowerCase()]
  const z = third[x.hexOpcode]

  return {
    ...x,
    bytesCount: y.bytesCount ? +y.bytesCount : 0,
    flagsAffected: (y.flags === '' || y.flags === undefined) ? [] : y.flags.split(',').map(o => o.trim()),
    tags: x.tags === '' ? '' : x.tags.split(',').map(i => i.trim()),
    functionDescription: y.function ?? '',
    rusDescription: z?.description ?? '',
  }
})

writeFileSync('out.json', JSON.stringify(res, undefined, 2))